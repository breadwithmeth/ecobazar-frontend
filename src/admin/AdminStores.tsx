import React, { useState, useEffect } from 'react';
import { apiGetStores, apiAssignStoreOwner, apiUpdateStore } from '../api';

interface StoreOwner {
  id: number;
  name: string;
  telegram_user_id: string | null;
  phone_number: string | null;
  role: string;
}

interface StoreProduct {
  id: number;
  name: string;
  price: number;
  image: string | null;
}

interface Store {
  id: number;
  name: string;
  address: string;
  ownerId: number | null;
  owner?: StoreOwner | null;
  products?: StoreProduct[];
  _count?: {
    products: number;
  };
}

interface Props {
  onBack: () => void;
  token: string;
}

const AdminStores: React.FC<Props> = ({ onBack, token }) => {
  const [stores, setStores] = useState<Store[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [selectedStoreId, setSelectedStoreId] = useState<number | null>(null);
  const [ownerIdInput, setOwnerIdInput] = useState('');
  const [assigningOwner, setAssigningOwner] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
  const [editingStore, setEditingStore] = useState<Store | null>(null);
  const [editStoreName, setEditStoreName] = useState('');
  const [editStoreAddress, setEditStoreAddress] = useState('');
  const [editStoreOwnerId, setEditStoreOwnerId] = useState('');
  const [updatingStore, setUpdatingStore] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
  const loadStores = async (page = 1, search = '') => {
    try {
      setLoading(true);
      setError('');
      
      console.log('üîê Loading stores with token:', token ? `${token.substring(0, 20)}...` : 'NO TOKEN');
      
      const response = await apiGetStores(token, page, 10, search);
      console.log('API Response:', response);
      
      if (response && response.success && response.data) {
        // –î–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ response.data (–º–∞—Å—Å–∏–≤)
        setStores(response.data);
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ response.meta
        setTotalPages(response.meta?.totalPages || 1);
        setCurrentPage(page);
      } else {
        setStores([]);
        setTotalPages(1);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã');
      setStores([]);
    } finally {
      setLoading(false);
    }
  };

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞
  const handleAssignOwner = async () => {
    if (!selectedStoreId || !ownerIdInput.trim()) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!token || token.trim() === '') {
      alert('–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      setAssigningOwner(true);
      const ownerId = parseInt(ownerIdInput.trim());
      console.log('üîÑ Assigning owner:', ownerId, 'to store:', selectedStoreId);
      console.log('üîê Token available:', token ? 'YES' : 'NO');
      
      await apiAssignStoreOwner(token, selectedStoreId, ownerId);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
      await loadStores(currentPage, searchQuery);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setSelectedStoreId(null);
      setOwnerIdInput('');
      alert('–í–ª–∞–¥–µ–ª–µ—Ü —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!');
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞: ' + (err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setAssigningOwner(false);
    }
  };

  // –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
  const handleSearch = () => {
    setCurrentPage(1);
    loadStores(1, searchQuery);
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
  const handleEditStore = (store: Store) => {
    setEditingStore(store);
    setEditStoreName(store.name);
    setEditStoreAddress(store.address);
    setEditStoreOwnerId(store.ownerId ? store.ownerId.toString() : '');
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
  const handleUpdateStore = async () => {
    if (!editingStore || !editStoreName.trim() || !editStoreAddress.trim()) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞');
      return;
    }

    if (!token || token.trim() === '') {
      alert('–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      setUpdatingStore(true);
      
      const updateData: { name: string; address: string; ownerId?: number } = {
        name: editStoreName.trim(),
        address: editStoreAddress.trim()
      };

      // –î–æ–±–∞–≤–ª—è–µ–º ownerId —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
      if (editStoreOwnerId.trim()) {
        const ownerId = parseInt(editStoreOwnerId.trim());
        if (!isNaN(ownerId)) {
          updateData.ownerId = ownerId;
        }
      }

      console.log('üîÑ Updating store with data:', updateData);
      
      await apiUpdateStore(token, editingStore.id, updateData);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
      await loadStores(currentPage, searchQuery);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setEditingStore(null);
      setEditStoreName('');
      setEditStoreAddress('');
      setEditStoreOwnerId('');
      
      alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: ' + (err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setUpdatingStore(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadStores();
  }, []);

  return (
    <div style={{ padding: 20 }}>
      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 24 }}>
        <button 
          onClick={onBack}
          style={{
            background: 'none',
            border: 'none',
            fontSize: 24,
            cursor: 'pointer',
            padding: 0,
            marginRight: 12
          }}
        >
          ‚Üê
        </button>
        <h2 style={{ margin: 0, fontSize: 24, fontWeight: 600 }}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏</h2>
      </div>

      {/* –ü–æ–∏—Å–∫ */}
      <div style={{ marginBottom: 20 }}>
        <div style={{ display: 'flex', gap: 8, marginBottom: 12 }}>
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–¥—Ä–µ—Å—É..."
            style={{
              flex: 1,
              padding: '10px 12px',
              border: '1px solid #ddd',
              borderRadius: 6,
              fontSize: 14
            }}
            onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
          />
          <button
            onClick={handleSearch}
            style={{
              background: '#007bff',
              color: '#fff',
              border: 'none',
              borderRadius: 6,
              padding: '10px 16px',
              fontSize: 14,
              fontWeight: 600,
              cursor: 'pointer'
            }}
          >
            –ü–æ–∏—Å–∫
          </button>
        </div>
      </div>

      {error && (
        <div style={{
          background: '#fee',
          border: '1px solid #fcc',
          borderRadius: 8,
          padding: 12,
          marginBottom: 16,
          color: '#c00'
        }}>
          {error}
        </div>
      )}

      {loading ? (
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          height: 200,
          color: '#888'
        }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤...
        </div>
      ) : (
        <>
          {/* –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ */}
          <div style={{ marginBottom: 20 }}>
            {stores.length === 0 ? (
              <div style={{
                textAlign: 'center',
                padding: 40,
                color: '#888',
                background: '#f8f9fa',
                borderRadius: 8
              }}>
                –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
              </div>
            ) : (
              <div style={{ display: 'grid', gap: 16 }}>
                {stores.map(store => (
                  <div
                    key={store.id}
                    style={{
                      background: '#fff',
                      border: '1px solid #eee',
                      borderRadius: 12,
                      padding: 16,
                      boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
                    }}
                  >
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: 12 }}>
                      <div>
                        <h3 style={{ margin: '0 0 4px 0', fontSize: 18, fontWeight: 600, color: '#333' }}>
                          {store.name}
                        </h3>
                        <p style={{ margin: '0 0 8px 0', color: '#666', fontSize: 14 }}>
                          üìç {store.address}
                        </p>
                        {store._count && (
                          <p style={{ margin: 0, color: '#888', fontSize: 13 }}>
                            üì¶ –¢–æ–≤–∞—Ä–æ–≤: {store._count.products}
                          </p>
                        )}
                      </div>
                      <div style={{ textAlign: 'right' }}>
                        <span style={{
                          background: '#e3f2fd',
                          color: '#1976d2',
                          padding: '4px 8px',
                          borderRadius: 12,
                          fontSize: 12,
                          fontWeight: 500
                        }}>
                          ID: {store.id}
                        </span>
                      </div>
                    </div>

                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ */}
                    {store.owner ? (
                      <div style={{
                        background: '#f0f8ff',
                        border: '1px solid #b3d9ff',
                        borderRadius: 8,
                        padding: 12,
                        marginBottom: 12
                      }}>
                        <div style={{ display: 'flex', alignItems: 'center', marginBottom: 6 }}>
                          <span style={{ fontSize: 16, marginRight: 6 }}>üë§</span>
                          <strong style={{ color: '#333' }}>–í–ª–∞–¥–µ–ª–µ—Ü:</strong>
                        </div>
                        <div style={{ marginLeft: 22 }}>
                          <p style={{ margin: '2px 0', color: '#555', fontSize: 14 }}>
                            <strong>{store.owner.name}</strong> (ID: {store.owner.id})
                          </p>
                          {store.owner.phone_number && (
                            <p style={{ margin: '2px 0', color: '#666', fontSize: 13 }}>
                              üìû {store.owner.phone_number}
                            </p>
                          )}
                          <p style={{ margin: '2px 0', color: '#666', fontSize: 13 }}>
                            üè∑Ô∏è {store.owner.role}
                          </p>
                        </div>
                      </div>
                    ) : (
                      <div style={{
                        background: '#fff3cd',
                        border: '1px solid #ffeaa7',
                        borderRadius: 8,
                        padding: 12,
                        marginBottom: 12
                      }}>
                        <p style={{ margin: 0, color: '#856404', fontSize: 14 }}>
                          ‚ö†Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
                        </p>
                      </div>
                    )}

                    {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
                    {store.products && store.products.length > 0 && (
                      <div style={{
                        background: '#f8f9fa',
                        border: '1px solid #e9ecef',
                        borderRadius: 8,
                        padding: 12,
                        marginBottom: 12
                      }}>
                        <div style={{ display: 'flex', alignItems: 'center', marginBottom: 8 }}>
                          <span style={{ fontSize: 16, marginRight: 6 }}>üì¶</span>
                          <strong style={{ color: '#333' }}>–¢–æ–≤–∞—Ä—ã (–ø–æ–∫–∞–∑–∞–Ω–æ {Math.min(store.products.length, 5)} –∏–∑ {store._count?.products || store.products.length}):</strong>
                        </div>
                        <div style={{ marginLeft: 22 }}>
                          {store.products.slice(0, 5).map(product => (
                            <div key={product.id} style={{ 
                              display: 'flex', 
                              justifyContent: 'space-between', 
                              alignItems: 'center',
                              padding: '4px 0',
                              borderBottom: '1px solid #eee'
                            }}>
                              <span style={{ color: '#555', fontSize: 13 }}>
                                {product.name}
                              </span>
                              <span style={{ color: '#28a745', fontSize: 13, fontWeight: 500 }}>
                                {product.price}‚ÇΩ
                              </span>
                            </div>
                          ))}
                          {store.products.length > 5 && (
                            <div style={{ 
                              padding: '4px 0',
                              color: '#666',
                              fontSize: 12,
                              fontStyle: 'italic'
                            }}>
                              ... –∏ –µ—â–µ {store.products.length - 5} —Ç–æ–≤–∞—Ä–æ–≤
                            </div>
                          )}
                        </div>
                      </div>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º */}
                    <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
                      <button
                        onClick={() => handleEditStore(store)}
                        style={{
                          background: '#007bff',
                          color: '#fff',
                          border: 'none',
                          borderRadius: 6,
                          padding: '8px 12px',
                          fontSize: 13,
                          fontWeight: 500,
                          cursor: 'pointer',
                          transition: 'all 0.2s'
                        }}
                      >
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                      
                      <button
                        onClick={() => setSelectedStoreId(store.id)}
                        style={{
                          background: store.owner ? '#6c757d' : '#28a745',
                          color: '#fff',
                          border: 'none',
                          borderRadius: 6,
                          padding: '8px 12px',
                          fontSize: 13,
                          fontWeight: 500,
                          cursor: 'pointer',
                          transition: 'all 0.2s'
                        }}
                      >
                        {store.owner ? 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞' : 'üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞'}
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
          {totalPages > 1 && (
            <div style={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              gap: 8,
              marginBottom: 20
            }}>
              <button
                onClick={() => currentPage > 1 && loadStores(currentPage - 1, searchQuery)}
                disabled={currentPage <= 1}
                style={{
                  background: currentPage <= 1 ? '#e9ecef' : '#007bff',
                  color: currentPage <= 1 ? '#6c757d' : '#fff',
                  border: 'none',
                  borderRadius: 4,
                  padding: '6px 12px',
                  fontSize: 13,
                  cursor: currentPage <= 1 ? 'not-allowed' : 'pointer'
                }}
              >
                ‚Üê –ü—Ä–µ–¥
              </button>
              
              <span style={{ fontSize: 14, color: '#666' }}>
                –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
              </span>
              
              <button
                onClick={() => currentPage < totalPages && loadStores(currentPage + 1, searchQuery)}
                disabled={currentPage >= totalPages}
                style={{
                  background: currentPage >= totalPages ? '#e9ecef' : '#007bff',
                  color: currentPage >= totalPages ? '#6c757d' : '#fff',
                  border: 'none',
                  borderRadius: 4,
                  padding: '6px 12px',
                  fontSize: 13,
                  cursor: currentPage >= totalPages ? 'not-allowed' : 'pointer'
                }}
              >
                –°–ª–µ–¥ ‚Üí
              </button>
            </div>
          )}
        </>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ */}
      {editingStore && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            background: '#fff',
            borderRadius: 12,
            padding: 24,
            maxWidth: 500,
            width: '90%',
            boxShadow: '0 10px 30px rgba(0,0,0,0.3)',
            maxHeight: '80vh',
            overflowY: 'auto'
          }}>
            <h3 style={{ margin: '0 0 16px 0', fontSize: 20, fontWeight: 600 }}>
              ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
            </h3>
            
            <p style={{ margin: '0 0 16px 0', color: '#666', fontSize: 14 }}>
              –ú–∞–≥–∞–∑–∏–Ω ID: {editingStore.id}
            </p>
            
            <div style={{ marginBottom: 16 }}>
              <label style={{ display: 'block', marginBottom: 6, fontSize: 14, fontWeight: 500 }}>
                –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ *:
              </label>
              <input
                type="text"
                value={editStoreName}
                onChange={(e) => setEditStoreName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #ddd',
                  borderRadius: 6,
                  fontSize: 14,
                  boxSizing: 'border-box'
                }}
                disabled={updatingStore}
              />
            </div>
            
            <div style={{ marginBottom: 16 }}>
              <label style={{ display: 'block', marginBottom: 6, fontSize: 14, fontWeight: 500 }}>
                –ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞ *:
              </label>
              <input
                type="text"
                value={editStoreAddress}
                onChange={(e) => setEditStoreAddress(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞"
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #ddd',
                  borderRadius: 6,
                  fontSize: 14,
                  boxSizing: 'border-box'
                }}
                disabled={updatingStore}
              />
            </div>
            
            <div style={{ marginBottom: 20 }}>
              <label style={{ display: 'block', marginBottom: 6, fontSize: 14, fontWeight: 500 }}>
                ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
              </label>
              <input
                type="number"
                value={editStoreOwnerId}
                onChange={(e) => setEditStoreOwnerId(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º"
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #ddd',
                  borderRadius: 6,
                  fontSize: 14,
                  boxSizing: 'border-box'
                }}
                disabled={updatingStore}
              />
              <small style={{ color: '#666', fontSize: 12, marginTop: 4, display: 'block' }}>
                –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
              </small>
            </div>
            
            <div style={{ display: 'flex', gap: 8, justifyContent: 'flex-end' }}>
              <button
                onClick={() => {
                  setEditingStore(null);
                  setEditStoreName('');
                  setEditStoreAddress('');
                  setEditStoreOwnerId('');
                }}
                disabled={updatingStore}
                style={{
                  background: '#6c757d',
                  color: '#fff',
                  border: 'none',
                  borderRadius: 6,
                  padding: '10px 16px',
                  fontSize: 14,
                  fontWeight: 500,
                  cursor: updatingStore ? 'not-allowed' : 'pointer',
                  opacity: updatingStore ? 0.6 : 1
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              
              <button
                onClick={handleUpdateStore}
                disabled={updatingStore || !editStoreName.trim() || !editStoreAddress.trim()}
                style={{
                  background: (updatingStore || !editStoreName.trim() || !editStoreAddress.trim()) ? '#e9ecef' : '#007bff',
                  color: (updatingStore || !editStoreName.trim() || !editStoreAddress.trim()) ? '#6c757d' : '#fff',
                  border: 'none',
                  borderRadius: 6,
                  padding: '10px 16px',
                  fontSize: 14,
                  fontWeight: 500,
                  cursor: (updatingStore || !editStoreName.trim() || !editStoreAddress.trim()) ? 'not-allowed' : 'pointer'
                }}
              >
                {updatingStore ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ */}
      {selectedStoreId && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            background: '#fff',
            borderRadius: 12,
            padding: 24,
            maxWidth: 400,
            width: '90%',
            boxShadow: '0 10px 30px rgba(0,0,0,0.3)'
          }}>
            <h3 style={{ margin: '0 0 16px 0', fontSize: 18, fontWeight: 600 }}>
              –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞
            </h3>
            
            <p style={{ margin: '0 0 16px 0', color: '#666', fontSize: 14 }}>
              –ú–∞–≥–∞–∑–∏–Ω ID: {selectedStoreId}
            </p>
            
            <div style={{ marginBottom: 16 }}>
              <label style={{ display: 'block', marginBottom: 6, fontSize: 14, fontWeight: 500 }}>
                ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª—å SELLER):
              </label>
              <input
                type="number"
                value={ownerIdInput}
                onChange={(e) => setOwnerIdInput(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #ddd',
                  borderRadius: 6,
                  fontSize: 14,
                  boxSizing: 'border-box'
                }}
                disabled={assigningOwner}
              />
            </div>
            
            <div style={{ display: 'flex', gap: 8, justifyContent: 'flex-end' }}>
              <button
                onClick={() => {
                  setSelectedStoreId(null);
                  setOwnerIdInput('');
                }}
                disabled={assigningOwner}
                style={{
                  background: '#6c757d',
                  color: '#fff',
                  border: 'none',
                  borderRadius: 6,
                  padding: '10px 16px',
                  fontSize: 14,
                  fontWeight: 500,
                  cursor: assigningOwner ? 'not-allowed' : 'pointer',
                  opacity: assigningOwner ? 0.6 : 1
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              
              <button
                onClick={handleAssignOwner}
                disabled={assigningOwner || !ownerIdInput.trim()}
                style={{
                  background: (assigningOwner || !ownerIdInput.trim()) ? '#e9ecef' : '#28a745',
                  color: (assigningOwner || !ownerIdInput.trim()) ? '#6c757d' : '#fff',
                  border: 'none',
                  borderRadius: 6,
                  padding: '10px 16px',
                  fontSize: 14,
                  fontWeight: 500,
                  cursor: (assigningOwner || !ownerIdInput.trim()) ? 'not-allowed' : 'pointer'
                }}
              >
                {assigningOwner ? '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ...' : '–ù–∞–∑–Ω–∞—á–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminStores;
